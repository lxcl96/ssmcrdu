<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--
    targetRuntime: 执行生成的逆向工程的版本
    MyBatis3Simple: 生成基本的CRUD（清新简洁版）【增删改，查询所有，根据id查询共5个操作】
    MyBatis3: 生成带条件的CRUD（奢华尊享版） ****
    -->
    <context id="DB2Tables" targetRuntime="MyBatis3">
        <!-- 数据库的连接信息 -->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/ssm_crdu"
                        userId="root"
                        password="123456">
        </jdbcConnection>

        <!-- javaBean的生成策略  .表示工程根目录即src的父目录-->
        <javaModelGenerator targetPackage="com.ly.ssm.bean" targetProject=".\src\main\java">
            <property name="enableSubPackages" value="true" /> <!-- 是否遵循Java中.表示目录的意思，否则.就是名字-->
            <property name="trimStrings" value="true" /> <!-- 去掉数据库字段名前后的空格(生成属性)-->
        </javaModelGenerator>

        <!-- SQL映射文件Mapper.xml文件的生成策略 -->
        <sqlMapGenerator targetPackage="mapper"
                         targetProject=".\src\main\resources">
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>

        <!-- Mapper接口mapper.java的生成策略 -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="com.ly.ssm.dao" targetProject=".\src\main\java">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>

        <!-- 逆向分析的表 -->
        <!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName  即：
            <table tableName=* />
        -->
        <!-- domainObjectName属性指定生成出来的实体类的类名，mapper接口和文件会自动加上mapper不需要自己加 -->
        <table tableName="tbl_emp" domainObjectName="Employee"/>
        <table tableName="tbl_dept" domainObjectName="Department"/>
    </context>

</generatorConfiguration>