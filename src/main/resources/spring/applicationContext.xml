<?xml version="1.0" encoding="UTF-8"?>
<!-- Spring的配置文件，这里主要配置和业务逻辑相关的如：数据源配置，事务控制等-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- 1、开启注解扫描 扫描全包 除了控制注解@Controller -->
    <context:component-scan base-package="com.ly.ssm" use-default-filters="false">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- 2、创建全局外部配置文件，引用它（包括数据库连接信息）-->
    <context:property-placeholder location="classpath:jdbc.properties" order="1" file-encoding="utf-8" />


    <!-- 3、、配置c3p0数据源  可以自己换为druid ${属性} 取值-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" >
        <property name="driverClass" value="${c3p0.driver}" />
        <property name="jdbcUrl" value="${c3p0.url}" />
        <property name="user" value="${c3p0.username}" />
        <property name="password" value="${c3p0.password}"/>
    </bean>


    <!-- 4、配置mybatis整合 注意看 别导错包了 是Spring-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 配置mybatis的全局配置文件  (最重要的，其余可以在mybatis的全局)-->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <property name="dataSource" ref="dataSource" />
        <!-- 指定mybatis的mapper文件(实现mapper接口的文件)位置，类路径下的所有xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
    </bean>


    <!-- 配置扫描器，将mybatis接口的实现 (动态代理的匿名内部类)加入到ioc容器中-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描所有dao接口的实现，加入到IOC容器中-->
        <property name="basePackage" value="com.ly.ssm.dao" />
    </bean>


    <!-- 开启事务控制-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 没有数据源怎么进行事务控制？？-->
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--配置事务通知，tx:advice -->
    <tx:advice id="transactionInterceptor" transaction-manager="transactionManager" >
        <!-- 配置增强方法-->
        <tx:attributes>
            <!--所有方法，需要配增强 -->
            <tx:method name="*" />
            <!-- get开头的所有方法  限制操作数据库的权限-->
            <tx:method name="get*" read-only="true" />

        </tx:attributes>
    </tx:advice>
    <!-- 开启基于xml的事务（或者基于注解的事务）  推荐使用xml  -->
    <aop:config>
        <!-- 切入点表达式  id随便取，service.. 表示service下所有类，包括子包的-->
        <aop:pointcut id="txPoint" expression="execution(* com.ly.ssm.service..*(..))"/>

        <!-- 配置切入点-->
        <aop:advisor advice-ref="transactionInterceptor" pointcut-ref="txPoint" />
    </aop:config>

</beans>